针对初级开发人员的c++/qt多线程框架

简介
c++/qt多线程编程是一项常见的开发任务，而C# 中的 async/await 机制开发多线程十分方便，我们实现了一个 C++/Qt 版本的 async/await 机制，以及附带任务管理与线程的安全删除接口。这个框架使用简单，适合新手上手，并且经过了初步的测试和调试。这个思路也同样适用于其他带事件回调的框架，如 libevent 和 OSG。

示例
以下是一个简单的使用示例，用于异步执行某段代码。通过添加三行标识异步流程的开始与结束以及同步与异步的分界线，在不改变代码结构的前提下，将同步改为异步。

void Test::SyncCalculate() {
    m_pi = 计算圆周率();
    setText(m_pi);
}
void Test::ASyncCalculate() {
    int taskID=easyThread->async_task([=]() {
        m_pi = 计算圆周率();
    }, [=]() {
        setText(m_pi);
    });
}
在传统的多线程编程中，通常继承 QThread 类并重载 run
 方法，然后附加自定义信号，然后链接信号槽调用回调的流程相对繁琐。我们通过将这一流程的关键部分抽象出来，用std::function配合std容器存储可调用对象，并由 QThread 线程执行，在任务完成后将同步任务当做事件回调插入调用方线程，以实现异步编程。

进阶功能：任务管理与线程的安全删除
在实际应用中，用户常常需要对多个任务进行管理，例如查询的幕等性或者撤销查询;C++/Qt 中直接删除一个正在运行的线程对象后子线程仍会执行,可能造成潜在的bug，这是与业务开发无关的语言特性。为了解决这一问题，通过成员变量标识任务状态的方式，我们提供了任务管理接口。我们实现了对象同步 delete 不崩溃，并提供了异步删除接口。

开发理念
现在是chatgpt的时代了,他可以公允的评价代码质量,并帮助我们理解新代码, 并且写的这个类目标用户就是初级开发人员。所以我特意只保留了必要的边界检查以方便这一点.
我个人在大型互联网企业和外包公司都有工作经验。由于人员预算限制,业务变迁等原因,我们不能仅接受高质量的代码与高级开发人员。希望这个多线程框架对初级开发人员的快速上手能够有所帮助。
